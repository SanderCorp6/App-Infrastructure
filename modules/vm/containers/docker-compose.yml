services:
  reverse-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: "Reverse-proxy"
    restart: always
    ports:
      - 80:80
      - 443:443
    environment:
      - VIRTUAL_HOST=${MAIN_DOMAIN}
      - VIRTUAL_PATH=/.well-known
    volumes:
      - /volumes/nginx/certs:/etc/nginx/certs:ro
      - /volumes/nginx/vhostd:/etc/nginx/vhost.d
      - /volumes/nginx/html:/etc/nginx/html:rw
      - /var/run/docker.sock:/tmp/docker.sock:ro
  
  lets-encrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: "Lets-Encrypt"
    restart: always
    environment:
      - NGINX_PROXY_CONTAINER=Reverse-proxy
    volumes:
      - /volumes/nginx/certs:/etc/nginx/certs
      - /volumes/nginx/vhostd:/etc/nginx/vhost.d
      - /volumes/nginx/html:/etc/nginx/html:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro

  rrhh-api:
    image: ${RRHH_API_IMAGE}
    container_name: "rrhh-api"
    ports:
      - 3000:3000
    environment:
      - DB_USER=${DB_USER}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - PORT=${PORT}
      - EMAIL=${EMAIL}
      - PASSWORD=${PASSWORD}
      - SERVICE=${SERVICE}
      - VIRTUAL_HOST=api.${MAIN_DOMAIN}
      - VIRTUAL_PATH=/
      - LETSENCRYPT_HOST=api.${MAIN_DOMAIN}
      - LETSENCRYPT_EMAIL=sander.corpco@gmail.com

  rrhh-app:
    image: ${RRHH_APP_IMAGE}
    container_name: "rrhh-app"
    ports:
      - 5173:5173
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VIRTUAL_HOST=${MAIN_DOMAIN}
      - VIRTUAL_PATH=/
      - LETSENCRYPT_HOST=app01.${MAIN_DOMAIN}
      - LETSENCRYPT_EMAIL=sander.corpco@gmail.com

  db:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d

volumes:
  postgres_data: